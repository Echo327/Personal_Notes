// Disclaimer: This file is entirely
// Generated by OpenAI's ChatGPT-4, February 2025
// ChatGPT recommends using std::shared_ptr for safer memory management

#include <iostream>
#include <memory>
#include <vector>

// Component: Abstract Expression
class Expression {
public:
    virtual double evaluate() const = 0; // Common interface
    virtual ~Expression() = default;
};

// Leaf: Number
class Number : public Expression {
private:
    double value;
public:
    explicit Number(double val) : value(val) {}
    double evaluate() const override {
        return value;
    }
};

// Composite: Operation (e.g., Addition, Multiplication)
class Operation : public Expression {
private:
    char op; // '+' or '*'
    std::vector<std::shared_ptr<Expression>> operands;
public:
    explicit Operation(char operation) : op(operation) {}

    void addOperand(std::shared_ptr<Expression> operand) {
        operands.push_back(operand);
    }

    double evaluate() const override {
        if (operands.empty()) return 0;

        double result = (op == '*') ? 1 : 0;
        for (const auto& operand : operands) {
            if (op == '+') result += operand->evaluate();
            else if (op == '*') result *= operand->evaluate();
        }
        return result;
    }
};

// Main function demonstrating usage
int main() {
    auto five = std::make_shared<Number>(5);
    auto two = std::make_shared<Number>(2);
    auto three = std::make_shared<Number>(3);

    auto multiply = std::make_shared<Operation>('*');
    multiply->addOperand(two);
    multiply->addOperand(three);

    auto add = std::make_shared<Operation>('+');
    add->addOperand(five);
    add->addOperand(multiply);

    // Evaluating: 5 + (2 * 3) = 11
    std::cout << "Result: " << add->evaluate() << std::endl;

    return 0;
}
