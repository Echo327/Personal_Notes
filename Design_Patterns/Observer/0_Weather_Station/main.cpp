// Disclaimer: This file was entirely
// Generated by OpenAI's ChatGPT-4, March 2025
// and slightly modified by a real human

#include <iostream>
#include <vector>
#include <algorithm>

// Observer interface (for the alert system)
class Observer {
public:
    virtual void update(const std::string& probeName, float temperature) = 0;
};

// Subject interface (temperature probes)
class TemperatureProbe {
public:
    virtual void addObserver(Observer* observer) = 0;
    virtual void removeObserver(Observer* observer) = 0;
    virtual void setTemperature(float temperature) = 0;
    virtual void notifyObservers() = 0;
};

// Concrete implementation of the Temperature Probe
class ConcreteTemperatureProbe : public TemperatureProbe {
private:
    float temperature;
    std::string name;
    std::vector<Observer*> observers;

public:
    ConcreteTemperatureProbe(const std::string& name) : name(name), temperature(0) {}

    void addObserver(Observer* observer) override {
        observers.push_back(observer);
    }

    // Erase-Remove Idiom
    void removeObserver(Observer* observer) override {
        observers.erase(std::remove(observers.begin(), observers.end(), observer), observers.end());
    }

    void setTemperature(float newTemperature) override {
        temperature = newTemperature;
        notifyObservers();
    }

    void notifyObservers() override {
        for (Observer* observer : observers) {
            observer->update(name, temperature);
        }
    }
};

// Concrete Observer class: Alert System
class AlertSystem : public Observer {
private:
    std::vector<std::string> stations;

public:
    // Method to add stations to the alert system
    void addStation(const std::string& stationName) {
        stations.push_back(stationName);
    }

    void update(const std::string& probeName, float temperature) override {
        std::cout << "ALERT! " << probeName << " has changed temperature to " << temperature << " degrees C\n";
        
        // Send alert to each station
        for (const auto& station : stations) {
            std::cout << station << " received alert: " << probeName << " is at " << temperature << " degrees C\n";
        }
    }
};

int main() {
    // Create an alert system (observer)
    AlertSystem alertSystem;

    // Add 5 stations to the alert system
    alertSystem.addStation("Station 1");
    alertSystem.addStation("Station 2");
    alertSystem.addStation("Station 3");
    alertSystem.addStation("Station 4");
    alertSystem.addStation("Station 5");

    // Create 2 temperature probes
    ConcreteTemperatureProbe probe1("Probe 1");
    ConcreteTemperatureProbe probe2("Probe 2");

    // Register the alert system as an observer of both probes
    probe1.addObserver(&alertSystem);
    probe2.addObserver(&alertSystem);

    // Simulate temperature changes and alert stations
    probe1.setTemperature(25.0f);  // Probe 1 changes temperature
    probe2.setTemperature(30.5f);  // Probe 2 changes temperature

    // Remove one probe and set a new temperature
    probe1.removeObserver(&alertSystem);  // Remove alert from Probe 1
    probe1.setTemperature(18.0f);  // Probe 1 changes temperature again
    probe2.setTemperature(15.2f);  // Probe 2 changes temperature again

    probe1.addObserver(&alertSystem);
    probe1.setTemperature(21.0f);  // Probe 1 changes temperature again

    return 0;
}
