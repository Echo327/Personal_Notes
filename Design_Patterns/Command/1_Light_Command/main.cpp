// Disclaimer: This file is entirely
// Generated by OpenAI's ChatGPT-4, February 2025

#include <iostream>
#include <vector>
#include <memory>

// Command interface - This defines the abstract "execute" method that all concrete commands will implement.
class Command {
public:
    virtual void execute() = 0; // Abstract execute method
    virtual ~Command() = default; // Virtual destructor
};

// Receiver class - The class that knows how to perform the actual operations.
class Light {
public:
    void turnOn() {
        std::cout << "Light is ON\n";
    }
    void turnOff() {
        std::cout << "Light is OFF\n";
    }
};

// Concrete Command classes - These implement the Command interface, encapsulating a request to the receiver.
class TurnOnCommand : public Command {
private:
    Light* light; // The receiver of the command
public:
    TurnOnCommand(Light* light) : light(light) {}
    void execute() override {
        light->turnOn(); // Calls the receiver's method
    }
};

class TurnOffCommand : public Command {
private:
    Light* light; // The receiver of the command
public:
    TurnOffCommand(Light* light) : light(light) {}
    void execute() override {
        light->turnOff(); // Calls the receiver's method
    }
};

// Invoker class - This class asks the command to execute the request.
class RemoteControl {
private:
    std::shared_ptr<Command> command; // Holds a command to execute
public:
    void setCommand(std::shared_ptr<Command> cmd) {
        command = cmd; // Set the command
    }
    
    void pressButton() {
        command->execute(); // Execute the command when the button is pressed
    }
};

// Client code - This is where we set up the commands and the invoker.
int main() {
    Light light; // Create the receiver (the light)
    
    // Create command objects, linking them to the receiver (light)
    std::shared_ptr<Command> lightOn = std::make_shared<TurnOnCommand>(&light);
    std::shared_ptr<Command> lightOff = std::make_shared<TurnOffCommand>(&light);
    
    RemoteControl remote; // Create the invoker (remote control)
    
    // Turn the light on using the remote
    remote.setCommand(lightOn);
    remote.pressButton(); // Output: Light is ON
    
    // Turn the light off using the remote
    remote.setCommand(lightOff);
    remote.pressButton(); // Output: Light is OFF
    
    return 0;
}
