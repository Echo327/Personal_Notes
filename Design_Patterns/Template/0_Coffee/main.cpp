// Disclaimer: This file is entirely
// Generated by OpenAI's ChatGPT-4, March 2025

#include <iostream>
#include <string>

// Base class for Coffee making
class CoffeeMaker {
public:
    // Template Method: Defines the structure of the algorithm
    void makeCoffee() {
        boilWater();
        brewCoffee();
        pourInCup();
        addExtras();
    }

protected:
    // Common steps implemented in the base class
    void boilWater() {
        std::cout << "Boiling water...\n";
    }

    void pourInCup() {
        std::cout << "Pouring coffee into cup...\n";
    }

    void addExtras() {
        std::cout << "Adding sugar and milk...\n";
    }

    // Step that varies, left to be implemented by subclasses
    virtual void brewCoffee() = 0; // Pure virtual function
};

// Subclass for Espresso coffee
class EspressoMaker : public CoffeeMaker {
protected:
    // Implementing the specific brewing method for Espresso
    void brewCoffee() override {
        std::cout << "Brewing espresso by pressing the grounds tightly...\n";
    }
};

// Subclass for Regular Coffee
class RegularCoffeeMaker : public CoffeeMaker {
protected:
    // Implementing the specific brewing method for regular coffee
    void brewCoffee() override {
        std::cout << "Brewing regular coffee by dripping hot water over grounds...\n";
    }
};

int main() {
    // Create an EspressoMaker object and make espresso
    std::cout << "Making Espresso:\n";
    EspressoMaker espresso;
    espresso.makeCoffee();  // Reuses common steps from CoffeeMaker
    
    std::cout << std::endl;
    std::cout << "Making Regular Coffee:\n";
    // Create a RegularCoffeeMaker object and make regular coffee
    RegularCoffeeMaker regularCoffee;
    regularCoffee.makeCoffee();  // Reuses common steps from CoffeeMaker

    return 0;
}
