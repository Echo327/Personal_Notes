// Disclaimer: This file was
// Generated by OpenAI's ChatGPT-4, March 2025
// then modified by a real human

#include <iostream>
#include <vector>
#include <string>

// Stores the state of the game character
class Memento {
private:
    int health;
    int level;
    
public:
    Memento(int h, int l) : health(h), level(l) {}
    
    int getHealth() const { return health; }
    int getLevel() const { return level; }
};

// Originator: represents the game character whose state will be saved/restored
class GameCharacter {
private:
    int health;
    int level;
    
public:
    GameCharacter(int h, int l) : health(h), level(l) {}
    
    friend std::ostream& operator<<(std::ostream& os, const GameCharacter& character) {
        os << "Health: " << character.health << ", Level: " << character.level;
        return os;
    }

    // To save the current state of the character
    Memento createMemento() {
        return Memento(health, level);
    }
    
    // To restore the state of the character from a memento
    void restoreMemento(const Memento& memento) {
        health = memento.getHealth();
        level = memento.getLevel();
    }
    
    void takeDamage(int damage) {
        health -= damage;
        std::cout << "Character took damage, current health: " << health << std::endl;
    }
    
    void levelUp() {
        level++;
        health += 5;
        std::cout << "Character leveled up, current level: " << level << std::endl;
        std::cout << "Character leveled up, current health: " << health << std::endl;
    }
};

// Caretaker: responsible for storing and managing mementos
class Caretaker {
private:
    std::vector<Memento> mementoHistory;  // Stores state snapshots
    
public:
    void saveMemento(const Memento& memento) {
        mementoHistory.push_back(memento);
    }
    
    Memento getMemento(int index) const {
        return mementoHistory.at(index);
    }
};

int main() {
    GameCharacter character(100, 1);
    std::cout << character << std::endl;
    
    Caretaker caretaker;
    caretaker.saveMemento(character.createMemento());
    
    // Change the character's state
    character.takeDamage(20);
    character.levelUp();
    std::cout << character << std::endl;
    
    caretaker.saveMemento(character.createMemento());
    
    character.restoreMemento(caretaker.getMemento(0));
    std::cout << "Character state after restoration:" << std::endl;
    std::cout << character << std::endl;
    
    return 0;
}
