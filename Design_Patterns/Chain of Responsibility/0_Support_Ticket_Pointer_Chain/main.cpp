// Disclaimer: This file is entirely
// Generated by OpenAI's ChatGPT-4, February 2025

#include <iostream>
#include <string>

// Base class for Support Agents
class SupportAgent {
protected:
    SupportAgent* next; // Pointer to the next handler in the chain

public:
    SupportAgent() : next(nullptr) {} // Initialize the next handler to nullptr

    // Set the next agent in the chain
    void setNext(SupportAgent* nextAgent) {
        next = nextAgent; // Assign the next handler
    }

    // Pure virtual function for handling tickets (to be implemented by derived classes)
    virtual void handleTicket(const std::string& issue) = 0;
};

// Level 1 Support Agent
class Level1Support : public SupportAgent {
public:
    // Handles basic inquiries and issues
    void handleTicket(const std::string& issue) override {
        if (issue == "basic") {
            std::cout << "Level 1 Support: Handling basic inquiry.\n"; // Handles basic issues
        } else if (next) {
            std::cout << "Level 1 Support: Can't handle this issue. Escalating...\n";
            next->handleTicket(issue); // Pass to the next agent in the chain
        }
    }
};

// Level 2 Support Agent
class Level2Support : public SupportAgent {
public:
    // Handles more complex technical issues
    void handleTicket(const std::string& issue) override {
        if (issue == "technical") {
            std::cout << "Level 2 Support: Handling technical issue.\n"; // Handles technical issues
        } else if (next) {
            std::cout << "Level 2 Support: Can't handle this issue. Escalating...\n";
            next->handleTicket(issue); // Pass to the next agent in the chain
        }
    }
};

// Escalation Manager
class EscalationManager : public SupportAgent {
public:
    // Handles critical or unresolved tickets from Level 2
    void handleTicket(const std::string& issue) override {
        std::cout << "Escalation Manager: Handling critical issue: " << issue << "\n"; // Final resolution
    }
};

int main() {
    // Create instances of support agents
    Level1Support level1; // First level of support for basic inquiries
    Level2Support level2; // Second level for technical issues
    EscalationManager escalationManager; // Handles critical or unresolved issues

    // Set up the chain of responsibility
    level1.setNext(&level2);           // Level 1 points to Level 2
    level2.setNext(&escalationManager); // Level 2 points to the Escalation Manager

    // Example issues to handle
    std::string basicIssue = "basic";      // Issue that can be handled by Level 1
    std::string technicalIssue = "technical"; // Issue that can be handled by Level 2
    std::string criticalIssue = "urgent";  // Critical issue that needs escalation

    // Handling different types of tickets
    std::cout << "Handling basic issue:\n";
    level1.handleTicket(basicIssue); // Should be handled by Level 1

    std::cout << "\nHandling technical issue:\n";
    level1.handleTicket(technicalIssue); // Should be handled by Level 2

    std::cout << "\nHandling critical issue:\n";
    level1.handleTicket(criticalIssue); // Should escalate to the Escalation Manager

    return 0;
}
