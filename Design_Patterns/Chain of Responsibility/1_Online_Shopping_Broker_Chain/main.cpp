// Disclaimer: This file is entirely
// Generated by OpenAI's ChatGPT-4, February 2025

#include <iostream>
#include <string>
#include <memory>

// Abstract handler class
class Handler {
public:
    virtual ~Handler() {}
    
    // Sets the next handler in the chain
    virtual void setNext(std::shared_ptr<Handler> nextHandler) = 0;
    
    // Processes the request, to be implemented by concrete handlers
    virtual void processRequest(float &totalPrice, bool &isPaymentProcessed, int &stockStatus) = 0;
};

// Concrete handler for discount
class DiscountHandler : public Handler {
private:
    std::shared_ptr<Handler> nextHandler;  // Reference to the next handler in the chain

public:
    // Set the next handler in the chain
    void setNext(std::shared_ptr<Handler> nextHandler) override {
        this->nextHandler = nextHandler;
    }

    // Apply discount and pass the request to the next handler
    void processRequest(float &totalPrice, bool &isPaymentProcessed, int &stockStatus) override {
        std::cout << "Applying discount...\n";
        totalPrice *= 0.9;  // Applying 10% discount
        std::cout << "Discount applied! Total price: " << totalPrice << "\n";

        // Pass the request to the next handler in the chain
        if (nextHandler) {
            nextHandler->processRequest(totalPrice, isPaymentProcessed, stockStatus);
        }
    }
};

// Concrete handler for stock verification
class StockVerificationHandler : public Handler {
private:
    std::shared_ptr<Handler> nextHandler;  // Reference to the next handler in the chain

public:
    // Set the next handler in the chain
    void setNext(std::shared_ptr<Handler> nextHandler) override {
        this->nextHandler = nextHandler;
    }

    // Verify stock availability and pass the request to the next handler
    void processRequest(float &totalPrice, bool &isPaymentProcessed, int &stockStatus) override {
        std::cout << "Verifying stock...\n";
        
        // Check if stock is available
        if (stockStatus > 0) {
            std::cout << "Stock available for purchase.\n";
            // If stock is available, pass the request to the next handler
            if (nextHandler) {
                nextHandler->processRequest(totalPrice, isPaymentProcessed, stockStatus);
            }
        } else {
            std::cout << "Stock not available, cannot process order.\n";
            // Stop further processing if stock is not available
            isPaymentProcessed = false;
        }
    }
};

// Concrete handler for payment processing
class PaymentProcessingHandler : public Handler {
private:
    std::shared_ptr<Handler> nextHandler;  // Reference to the next handler in the chain

public:
    // Set the next handler in the chain
    void setNext(std::shared_ptr<Handler> nextHandler) override {
        this->nextHandler = nextHandler;
    }

    // Process payment and conclude the request handling
    void processRequest(float &totalPrice, bool &isPaymentProcessed, int &stockStatus) override {
        std::cout << "Processing payment...\n";
        
        // If payment can be processed (i.e., stock was available), complete the order
        if (isPaymentProcessed) {
            std::cout << "Payment processed successfully! Order total: " << totalPrice << "\n";
        } else {
            std::cout << "Payment failed due to stock issues.\n";
        }
    }
};

// Client Code
int main() {
    // Initial order details
    float totalPrice = 100.0f;  // Example total price
    bool isPaymentProcessed = true;  // Initially assume payment is valid
    int stockStatus = 1;  // 1 means in stock, 0 means out of stock

    // Creating handlers
    auto discountHandler = std::make_shared<DiscountHandler>();  // Discount handler
    auto stockVerificationHandler = std::make_shared<StockVerificationHandler>();  // Stock verification handler
    auto paymentProcessingHandler = std::make_shared<PaymentProcessingHandler>();  // Payment handler

    // Setting up the chain of responsibility
    // discountHandler -> stockVerificationHandler -> paymentProcessingHandler
    discountHandler->setNext(stockVerificationHandler);
    stockVerificationHandler->setNext(paymentProcessingHandler);

    // Start processing the request through the chain
    discountHandler->processRequest(totalPrice, isPaymentProcessed, stockStatus);

    return 0;
}
