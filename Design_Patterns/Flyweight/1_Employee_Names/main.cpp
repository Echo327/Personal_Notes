// Disclaimer: This file is entirely
// Generated by OpenAI's ChatGPT-4, February 2025

#include <iostream>
#include <unordered_map>
#include <string>
#include <memory>  // For std::shared_ptr

// Flyweight class to represent Employee
class Employee {
public:
    Employee(std::string name) : name(name) {}

    void display() const {
        std::cout << "Employee: " << name << std::endl;
    }

private:
    std::string name; // Shared state (Flyweight)
};

// Flyweight Factory to manage the shared names
class EmployeeNameFactory {
public:
    // Get or create a new Employee name
    std::shared_ptr<Employee> getEmployeeName(const std::string& name) {
        if (employeeNames.find(name) == employeeNames.end()) {
            employeeNames[name] = std::make_shared<Employee>(name);
        }
        return employeeNames[name];
    }

private:
    std::unordered_map<std::string, std::shared_ptr<Employee>> employeeNames;  // Store shared names
};

// Employee class that contains a reference to the Employee's name
class CompanyEmployee {
public:
    CompanyEmployee(const std::string& name, EmployeeNameFactory* factory) {
        this->name = factory->getEmployeeName(name);
    }

    void display() const {
        name->display();
    }

private:
    std::shared_ptr<Employee> name;  // Reference to shared Employee name (Flyweight)
};

int main() {
    // Create a factory to manage shared employee names
    EmployeeNameFactory nameFactory;

    // Create employees with potentially the same name
    CompanyEmployee employee1("Alice", &nameFactory);
    CompanyEmployee employee2("Bob", &nameFactory);
    CompanyEmployee employee3("Alice", &nameFactory);
    CompanyEmployee employee4("Charlie", &nameFactory);
    CompanyEmployee employee5("Bob", &nameFactory);

    // Display employee names
    employee1.display();
    employee2.display();
    employee3.display();
    employee4.display();
    employee5.display();

    // No need for manual memory management as shared_ptr handles cleanup automatically
    return 0;
}
