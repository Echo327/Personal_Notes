// Disclaimer: This file is entirely
// Generated by OpenAI's ChatGPT-4, February 2025

// Access Control Proxy controls access to a particular object,
// typically enforcing security restrictions or permissions.
// It acts as a gatekeeper, allowing only authorized users
// or processes to access the underlying object.

#include <iostream>
#include <string>

// Real object representing sensitive data
class SensitiveData {
public:
    void displayData() {
        std::cout << "Displaying sensitive data: Confidential information\n";
    }
};

// Access Control Proxy
class AccessControlProxy {
private:
    SensitiveData* sensitiveData; // The real object
    std::string userRole; // The role of the user

public:
    AccessControlProxy(const std::string& role) : sensitiveData(nullptr), userRole(role) {}

    ~AccessControlProxy() {
        if (sensitiveData) {
            delete sensitiveData;
        }
    }

    void displayData() {
        // Check if the user has the correct role to access the data
        if (userRole == "admin") {
            if (!sensitiveData) {
                sensitiveData = new SensitiveData(); // Create the real object only if needed
            }
            std::cout << "Access granted for user role: " << userRole << "\n";
            sensitiveData->displayData();  // Delegate the call to the real object
        } else {
            std::cout << "Access denied for user role: " << userRole << "\n";
        }
    }
};

int main() {
    // Simulate different user roles
    AccessControlProxy adminProxy("admin");
    AccessControlProxy guestProxy("guest");

    std::cout << "Admin accessing data:\n";
    adminProxy.displayData();  // Admin has access

    std::cout << "\nGuest accessing data:\n";
    guestProxy.displayData();  // Guest does not have access

    return 0;
}
