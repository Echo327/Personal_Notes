// Disclaimer: This file is entirely
// Generated by OpenAI's ChatGPT-4, March 2025

#include <iostream>
#include <string>
#include <memory>

// Strategy Interface
class IImageFilter {
public:
    virtual void applyFilter(const std::string& image) = 0;
    virtual ~IImageFilter() = default;
};

class GrayscaleFilter : public IImageFilter {
public:
    void applyFilter(const std::string& image) override {
        std::cout << "Applying Grayscale filter on image: " << image << std::endl;
    }
};

class SepiaFilter : public IImageFilter {
public:
    void applyFilter(const std::string& image) override {
        std::cout << "Applying Sepia filter on image: " << image << std::endl;
    }
};

class NegativeFilter : public IImageFilter {
public:
    void applyFilter(const std::string& image) override {
        std::cout << "Applying Negative filter on image: " << image << std::endl;
    }
};

// Context Class that uses a Strategy
class ImageEditor {
private:
    std::shared_ptr<IImageFilter> filterStrategy;

public:
    // Set the filter strategy dynamically
    void setFilterStrategy(std::shared_ptr<IImageFilter> strategy) {
        filterStrategy = strategy;
    }

    // Apply the selected filter to the image
    void applyFilter(const std::string& image) {
        if (filterStrategy) {
            filterStrategy->applyFilter(image);
        } else {
            std::cout << "No filter selected!" << std::endl;
        }
    }
};

int main() {
    // Create an ImageEditor context
    ImageEditor editor;

    // Dynamically change filter strategy at runtime based on user choice
    std::string image = "myPhoto.jpg";

    // User selects Grayscale filter
    editor.setFilterStrategy(std::make_shared<GrayscaleFilter>());
    editor.applyFilter(image);  // Applies Grayscale filter

    // User selects Sepia filter
    editor.setFilterStrategy(std::make_shared<SepiaFilter>());
    editor.applyFilter(image);  // Applies Sepia filter

    // User selects Negative filter
    editor.setFilterStrategy(std::make_shared<NegativeFilter>());
    editor.applyFilter(image);  // Applies Negative filter

    return 0;
}
